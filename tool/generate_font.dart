import 'dart:convert';
import 'dart:io';

import 'package:recase/recase.dart';

void main(List<String> arguments) {
  var file = new File(arguments.first);

  if (!file.existsSync()) {
    print('Cannot find the file "${arguments.first}".');
  }

  var content = file.readAsStringSync();
  Map<String, dynamic> icons = json.decode(content);

  Map<String, String> iconDefinitions = {};
  Map<String, String> lightIconDefinitions = {};

  for (String iconName in icons.keys) {
    var icon = icons[iconName];
    var unicode = icon['unicode'];
    List<String> styles = (icon['styles'] as List).cast<String>();

    if (styles.length > 1) {
      if (styles.contains('regular')) {
        styles.remove('regular');
        iconDefinitions[iconName] = generateIconDefinition(
          iconName,
          'regular',
          unicode,
        );
      }

      if (styles.contains('solid')) {
        lightIconDefinitions[iconName] = generateLightIconDefinition(
          iconName,
          unicode,
        );
      }

      for (String style in styles) {
        String name = '${style}_$iconName';
        iconDefinitions[name] = generateIconDefinition(
          name,
          style,
          unicode,
        );
      }
    } else {
      iconDefinitions[iconName] = generateIconDefinition(
        iconName,
        styles.first,
        unicode,
      );
    }
  }

  List<String> generatedOutput = [
    'library font_awesome_flutter;',
    '',
    "import 'package:flutter/widgets.dart';",
    "import 'package:font_awesome_flutter/icon_data.dart';",
    '',
    '// THIS FILE IS AUTOMATICALLY GENERATED!',
    '',
    'class FontAwesomeIcons {',
  ];

  generatedOutput.addAll(iconDefinitions.values);

  generatedOutput.add('}\n');
  generatedOutput.add('class FontAwesomeIconsPro {');
  generatedOutput.add('  final String packageName;');
  generatedOutput.add('  FontAwesomeIconsPro(this.packageName);\n');
  generatedOutput.addAll(lightIconDefinitions.values);
  generatedOutput.add('}\n');

  File output = new File('lib/font_awesome_flutter.dart');
  output.writeAsStringSync(generatedOutput.join('\n'));
}

const aliases = <String, String>{
  '500px': 'fiveHundredPx',
};

String generateIconDefinition(String iconName, String style, String unicode) {
  style = '${style[0].toUpperCase()}${style.substring(1)}';

  String iconDataSource = 'IconData$style';

  if (aliases.containsKey(iconName)) {
    iconName = aliases[iconName];
  }

  iconName = new ReCase(iconName).camelCase;

  return 'static const IconData $iconName = const $iconDataSource(0x$unicode);';
}

String generateLightIconDefinition(String iconName, String unicode) {
  if (aliases.containsKey(iconName)) {
    iconName = aliases[iconName];
  }

  iconName = new ReCase(iconName).camelCase;

  return '''
      IconData _$iconName;
      IconData get $iconName {
        if(_$iconName == null) {
          _$iconName = IconDataLight(packageName, 0x$unicode);
        }
        return _$iconName;
      }
    ''';
}
